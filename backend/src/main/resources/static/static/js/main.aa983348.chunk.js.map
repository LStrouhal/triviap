{"version":3,"sources":["components/DropdownStyle.js","components/DifficultyList.js","components/CategoryList.js","components/NumberList.js","services/apiService.js","components/NextButtonStyle.js","components/SelectionsNextButton.js","components/Selections.js","components/BackButton.js","images/greenMan.png","pages/TriviaSelector.js","components/Layout.js","components/AnswersButtonStyle.js","components/Answers.js","components/Questions.js","pages/TriviaGame.js","components/NewGameButtonStyle.js","pages/TriviaWelcome.js","pages/TriviaResults.js","components/CategoryScoreCard.js","components/Scores.js","pages/ScoreOverview.js","images/whiteMan.png","pages/LoginPage.js","pages/TriviaRegister.js","App.js","components/GlobalStyle.js","index.js"],"names":["useStyles","makeStyles","theme","formControl","minWidth","background","fontSize","borderRadius","MenuItem","Select","marginLeft","fontFamily","difficultyList","value","label","categoryList","numberList","baseUrl","userUrl","checkUserExists","user","axios","get","then","response","data","NextButtonStyle","styled","button","SelectionsNextButton","triviaApiParametersDTO","setSelectionParameters","setPoints","history","useHistory","hasDifficulty","difficulty","length","hasAmount","amount","hasCategory","category","onClick","event","preventDefault","post","callQuestionList","push","alert","Selections","onClickSetNumberOfQuestions","style","useState","setCategory","setAmount","setDifficulty","Wrapper","FormControl","className","disableUnderline","onChange","selection","newAmount","target","map","number","main","BackButton","handleClick","ArrowButton","TriviaSelector","Header","src","logo","alt","header","div","AnswerButtonStyle","props","status","css","Answers","answers","points","questionID","useParams","answerStatus","setAnswerStatus","handleSubmit","answer","some","answerStatusObject","id","triviaSelectedAnswerDTO","checkAnswer","questionId","selectedAnswer","updatedArray","updatedCount","console","log","getAnswerStatus","matchAnswer","find","undefined","parse","Questions","numberOfQuestions","setVisibleSeconds","questionSet","setQuestionSet","seconds","setSeconds","useEffect","getSingleQuestion","loadNextQuestion","currentQuestionID","parseInt","timer","setTimeout","clearTimeout","question","TriviaGame","visibleSeconds","NewGameButtonStyle","TriviaWelcome","totalScore","setTotalScore","getTotalPointsByUser","section","TriviaResults","selectionParameters","triviaPointSavingDTO","savePoints","CategoryScoreCard","triviaPointDetails","CategoryList","TableHeader","level","Section","Scores","scoreList","setScoreList","getScoreByUser","entry","ScoreOverview","LoginPage","setUser","userName","setUserName","hasUserName","useSpring","delay","opacity","from","propsLogin","onSubmit","type","placeholder","font-size","backgroundColor","font","outline","border","boxShadow","player","disabled","AddNewUserButton","form","TriviaRegister","userDTO","triviaPointCategory","addUser","pointSummary","newUser","App","setNumberOfQuestions","exact","path","Layout","createGlobalStyle","ReactDOM","render","StrictMode","GlobalStyle","document","getElementById"],"mappings":"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","file":"static/js/main.aa983348.chunk.js","sourcesContent":["import { makeStyles } from \"@material-ui/core\";\n\nconst useStyles = makeStyles((theme) => ({\n  formControl: {\n    minWidth: 315,\n    background: \"#f7f7f2\",\n    fontSize: \"0.7em\",\n    borderRadius: \"10px\",\n  },\n  MenuItem: { fontSize: \"0.9em\" },\n  Select: { marginLeft: 7, fontFamily: \"Helvetica Neue\" },\n}));\n\nexport default useStyles;\n","export const difficultyList = [\n    {\n        value: \"easy\",\n        label: \"Easy\"\n    },\n    {\n        value: \"medium\",\n        label: \"Medium\"\n    },\n    {\n        value: \"hard\",\n        label: \"Hard\"\n    }\n    ]","export const categoryList = [\n    {\n        value: 9,\n        label: \"General Knowledge\"\n    },\n    {\n        value: 10,\n        label: \"Entertainment: Books\"\n    },\n    {\n        value: 11,\n        label: \"Entertainment: Film\"\n    },\n    {\n        value: 12,\n        label: \"Entertainment: Music\"\n    },\n    {\n        value: 13,\n        label: \"Entertainment: Musicals & Theaters\"\n    },\n    {\n        value: 14,\n        label: \"Entertainment: Television\"\n    },\n    {\n        value: 15,\n        label: \"Entertainment: Video Games\"\n    },\n    {\n        value: 16,\n        label: \"Entertainment: Board Games\"\n    },\n    {\n        value: 17,\n        label: \"Science & Nature\"\n    },\n    {\n        value: 18,\n        label: \"Science: Computers\"\n    },\n    {\n        value: 19,\n        label: \"Science: Mathematics\"\n    },\n    {\n        value: 20,\n        label: \"Mythology\"\n    },\n    {\n        value: 21,\n        label: \"Sports\"\n    },\n    {\n        value: 22,\n        label: \"Geography\"\n    },\n    {\n        value: 23,\n        label: \"History\"\n    },\n    {\n        value: 24,\n        label: \"Politics\"\n    },\n    {\n        value: 25,\n        label: \"Art\"\n    },\n    {\n        value: 26,\n        label: \"Celebrities\"\n    },\n    {\n        value: 27,\n        label: \"Animals\"\n    },\n    {\n        value: 28,\n        label: \"Vehicles\"\n    },\n    {\n        value: 29,\n        label: \"Entertainment: Comics\"\n    },\n    {\n        value: 30,\n        label: \"Science: Gadgets\"\n    },\n    {\n        value: 31,\n        label: \"Entertainment: Japanese Anime & Manga\"\n    },\n    {\n        value: 32,\n        label: \"Entertainment: Cartoon & Animations\"\n    }\n]\n\n\n\n","export const numberList = [\n    {\n        value: 5,\n        label: \"5\"\n    },\n    {\n        value: 10,\n        label: \"10\"\n    },\n    {\n        value: 15,\n        label: \"15\"\n    },\n    {\n        value: 20,\n        label: \"20\"\n    },\n    {\n        value: 25,\n        label: \"25\"\n    },\n    {\n        value: 30,\n        label: \"30\"\n    }\n]","import axios from \"axios\";\n\nconst baseUrl = \"/questions\";\nconst userUrl = \"/api/user\";\nconst scoreOverviewUrl = \"/questions/scoreOverview\";\nconst totalScoreUrl = \"/questions/totalScore\";\n\nexport const callQuestionList = (triviaApiParametersDTO) =>\n  axios.post(baseUrl, triviaApiParametersDTO).then();\n\nexport const getSingleQuestion = (questionID) =>\n  axios.get(`${baseUrl}/${questionID}`).then((response) => response.data);\n\nexport const checkAnswer = (triviaSelectedAnswerDTO) =>\n  axios\n    .post(baseUrl + \"/answer\", triviaSelectedAnswerDTO)\n    .then((response) => response.data);\n\nexport const savePoints = (triviaPointSavingDTO) =>\n  axios\n    .post(baseUrl + \"/points\", triviaPointSavingDTO)\n    .then((response) => response.data);\n\nexport const getScoreByUser = (user) =>\n  axios.get(`${scoreOverviewUrl}/${user}`).then((response) => response.data);\n\nexport const getTotalPointsByUser = (user) =>\n  axios.get(`${totalScoreUrl}/${user}`).then((response) => response.data);\n\nexport const checkUserExists = (user) =>\n  axios.get(`${userUrl}/${user}`).then((response) => response.data);\n\nexport const addUser = (userDTO) =>\n  axios.post(userUrl, userDTO).then((response) => response.data);\n","import styled from \"styled-components/macro\";\n\nexport const NextButtonStyle = styled.button`\n  border: none;\n  background: var(--greenStandard);\n  color: var(--beigeStandard);\n  padding: 10px 0 10px 0;\n  font-size: 40px;\n  display: flex;\n  align-items: flex-end;\n  outline: none;\n  box-shadow: none;\n`;\n","import { BsArrowRightShort } from \"react-icons/bs\";\nimport { callQuestionList } from \"../services/apiService\";\nimport { useHistory } from \"react-router-dom\";\nimport { NextButtonStyle } from \"./NextButtonStyle\";\n\nexport default function SelectionsNextButton({\n  triviaApiParametersDTO,\n  setSelectionParameters,\n  setPoints,\n}) {\n  const history = useHistory();\n  const hasDifficulty = triviaApiParametersDTO.difficulty.length > 0;\n  const hasAmount = triviaApiParametersDTO.amount > 0;\n  const hasCategory = triviaApiParametersDTO.category > 0;\n\n  const handleSubmit = (event) => {\n    if (hasDifficulty || hasAmount || hasCategory) {\n      event.preventDefault();\n      callQuestionList(triviaApiParametersDTO).then(() => {\n        setPoints(0);\n        setSelectionParameters(triviaApiParametersDTO);\n        history.push(\"/questions/1\");\n      });\n    } else {\n      alert(\n        \"Please ensure you select amount, category and level of difficulty\"\n      );\n    }\n  };\n\n  return (\n    <NextButtonStyle>\n      <BsArrowRightShort onClick={handleSubmit} />\n    </NextButtonStyle>\n  );\n}\n","import styled from \"styled-components/macro\";\nimport { useState } from \"react\";\nimport useStyles from \"./DropdownStyle\";\nimport { FormControl, MenuItem, Select } from \"@material-ui/core\";\nimport { difficultyList } from \"./DifficultyList\";\nimport { categoryList } from \"./CategoryList\";\nimport { numberList } from \"./NumberList\";\nimport SelectionsNextButton from \"./SelectionsNextButton\";\n\nexport default function Selections({\n  onClickSetNumberOfQuestions,\n  setSelectionParameters,\n  setPoints,\n}) {\n  const style = useStyles();\n\n  const [category, setCategory] = useState(\"\");\n  const handleChangeCategory = (selection) =>\n    setCategory(selection.target.value);\n\n  const [amount, setAmount] = useState(\"\");\n  const handleChangeNumber = (selection) => {\n    const newAmount = selection.target.value;\n    setAmount(newAmount);\n    onClickSetNumberOfQuestions(newAmount);\n  };\n\n  const [difficulty, setDifficulty] = useState(\"\");\n  const handleChangeDifficulty = (selection) =>\n    setDifficulty(selection.target.value);\n\n  const triviaApiParametersDTO = {\n    amount: amount,\n    category: category,\n    difficulty: difficulty,\n  };\n\n  return (\n    <Wrapper>\n      <section>\n        <header> Select number of questions:</header>\n        <FormControl className={style.formControl}>\n          <Select\n            className={style.Select}\n            disableUnderline={true}\n            onChange={handleChangeNumber}\n            value={amount}\n          >\n            {numberList.map((number) => (\n              <MenuItem\n                className={style.MenuItem}\n                key={number.value}\n                value={number.value}\n              >\n                {number.label}\n              </MenuItem>\n            ))}\n          </Select>\n        </FormControl>\n      </section>\n      <section>\n        <header> Select category:</header>\n        <FormControl className={style.formControl}>\n          <Select\n            className={style.Select}\n            disableUnderline={true}\n            onChange={handleChangeCategory}\n            value={category}\n          >\n            {categoryList.map((category) => (\n              <MenuItem key={category.value} value={category.value}>\n                {category.label}\n              </MenuItem>\n            ))}\n          </Select>\n        </FormControl>\n      </section>\n      <section>\n        <header> Select level of difficulty:</header>\n        <FormControl className={style.formControl}>\n          <Select\n            className={style.Select}\n            disableUnderline={true}\n            onChange={handleChangeDifficulty}\n            value={difficulty}\n          >\n            {difficultyList.map((difficulty) => (\n              <MenuItem key={difficulty.value} value={difficulty.value}>\n                {difficulty.label}\n              </MenuItem>\n            ))}\n          </Select>\n        </FormControl>\n      </section>\n      <footer>\n        <SelectionsNextButton\n          setSelectionParameters={setSelectionParameters}\n          triviaApiParametersDTO={triviaApiParametersDTO}\n          setPoints={setPoints}\n        />\n      </footer>\n    </Wrapper>\n  );\n}\n\nconst Wrapper = styled.main`\n  overflow-y: scroll;\n  padding: 0 30px;\n  display: grid;\n  grid-template-rows: 20% 20% 20% auto;\n\n  header {\n    font-size: 1.2em;\n    padding: 30px 10px 10px 0;\n  }\n\n  footer {\n    display: flex;\n    justify-content: flex-end;\n  }\n`;\n","import styled from \"styled-components/macro\";\nimport { BsArrowLeftShort } from \"react-icons/bs\";\n\nexport default function BackButton({ handleClick }) {\n  return (\n    <ArrowButton>\n      <BsArrowLeftShort onClick={handleClick} />\n    </ArrowButton>\n  );\n}\n\nconst ArrowButton = styled.button`\n  border: none;\n  background: var(--beigeStandard);\n  color: var(--greenStandard);\n  padding: 0;\n  font-size: 40px;\n  cursor: pointer;\n  justify-self: start;\n  display: flex;\n  align-items: center;\n`;\n","export default __webpack_public_path__ + \"static/media/greenMan.60631596.png\";","import Selections from \"../components/Selections\";\nimport BackButton from \"../components/BackButton\";\nimport styled from \"styled-components/macro\";\nimport React from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport logo from \"../images/greenMan.png\";\n\nexport default function TriviaSelector({\n  onClickSetNumberOfQuestions,\n  setSelectionParameters,\n  setPoints,\n}) {\n  const history = useHistory();\n  const handleClick = (event) => {\n    history.push(\"/welcome\");\n  };\n\n  return (\n    <>\n      <Header>\n        <BackButton handleClick={handleClick} />\n        <img src={logo} alt=\"Logo\" />\n      </Header>\n      <Selections\n        onClickSetNumberOfQuestions={onClickSetNumberOfQuestions}\n        setSelectionParameters={setSelectionParameters}\n        setPoints={setPoints}\n      />\n    </>\n  );\n}\n\nconst Header = styled.header`\n  background: var(--beigeStandard);\n  padding: 10px 30px 10px 30px;\n  display: grid;\n  grid-template-columns: 1fr 1fr;\n\n  img {\n    justify-self: end;\n    height: 3em;\n  }\n`;\n","import styled from \"styled-components/macro\";\n\nexport default styled.div`\n  height: 100vh;\n  background: var(--greenStandard);\n  color: var(--beigeStandard);\n  display: grid;\n  grid-template-rows: auto 1fr;\n`;\n","import styled, { css } from \"styled-components/macro\";\n\nexport const AnswerButtonStyle = styled.button`\n  background-color: var(--beigeStandard);\n  color: var(--greenStandard);\n  height: min-content;\n  display: flex;\n  flex-flow: wrap;\n  justify-content: left;\n  width: 100%;\n  padding: 15px;\n  font-size: 1.1em;\n  font-family: \"Playfair Display', serif\";\n  margin-bottom: 15px;\n  cursor: pointer;\n  border-radius: 10px;\n  outline: none;\n  box-shadow: none;\n  border: none;\n\n  ${(props) =>\n    props.status === \"correct\" &&\n    css`\n      background-color: limegreen;\n      outline: none;\n      box-shadow: none;\n      border: none;\n    `}\n\n  ${(props) =>\n    props.status === \"incorrect\" &&\n    css`\n      background-color: red;\n      outline: none;\n      box-shadow: none;\n      border: none;\n    `}\n`;\n","import { useParams } from \"react-router-dom\";\nimport { checkAnswer } from \"../services/apiService\";\nimport { AnswerButtonStyle } from \"./AnswersButtonStyle\";\nimport { useState } from \"react\";\nimport parse from \"html-react-parser\";\n\nexport default function Answers({ answers, points, setPoints }) {\n  const { questionID } = useParams();\n  const [answerStatus, setAnswerStatus] = useState([]);\n\n  function handleSubmit(answer) {\n    const hasAnswer = answerStatus.some(\n      (answerStatusObject) => answerStatusObject.id === answer\n    );\n    if (hasAnswer) {\n      return;\n    }\n    const triviaSelectedAnswerDTO = {\n      questionId: questionID,\n      selectedAnswer: answer,\n    };\n\n    checkAnswer(triviaSelectedAnswerDTO).then((response) => {\n      const status = response ? \"correct\" : \"incorrect\";\n      const updatedArray = [...answerStatus, { id: answer, status }];\n      setAnswerStatus(updatedArray);\n      let updatedCount = points;\n      if (response) {\n        updatedCount += 10;\n      } else {\n        updatedCount -= 10;\n      }\n      setPoints(updatedCount);\n      console.log(\"Points:\" + points);\n    });\n  }\n\n  const getAnswerStatus = (answer) => {\n    const matchAnswer = answerStatus.find(\n      (answerStatusObject) => answerStatusObject.id === answer\n    );\n    if (matchAnswer !== undefined) {\n      return matchAnswer.status;\n    }\n  };\n\n  return (\n    <section>\n      {answers.map((answer) => (\n        <AnswerButtonStyle\n          key={answer}\n          answer={answer}\n          status={getAnswerStatus(answer)}\n          onClick={() => handleSubmit(answer)}\n        >\n          {parse(answer)}\n        </AnswerButtonStyle>\n      ))}\n    </section>\n  );\n}\n","import { getSingleQuestion } from \"../services/apiService\";\nimport { useEffect, useState } from \"react\";\nimport { useHistory, useParams } from \"react-router-dom\";\nimport styled from \"styled-components/macro\";\nimport Answers from \"./Answers\";\nimport { NextButtonStyle } from \"./NextButtonStyle\";\nimport { BsArrowRightShort } from \"react-icons/bs\";\nimport parse from \"html-react-parser\";\n\nexport default function Questions({\n  numberOfQuestions,\n  setVisibleSeconds,\n  setPoints,\n  points,\n}) {\n  const history = useHistory();\n  const { questionID } = useParams();\n  const [questionSet, setQuestionSet] = useState(undefined);\n  const [seconds, setSeconds] = useState(30);\n\n  useEffect(() => {\n    getSingleQuestion(questionID).then(setQuestionSet);\n    setSeconds(30);\n  }, [questionID]);\n\n  const loadNextQuestion = () => {\n    console.log({ numberOfQuestions, questionID });\n    if (numberOfQuestions == questionID) {\n      history.push(\"/results\");\n    } else {\n      const currentQuestionID = parseInt(questionID, 10);\n      history.push(\"/questions/\" + (currentQuestionID + 1));\n    }\n  };\n\n  useEffect(() => {\n    const timer = setTimeout(() => {\n      if (seconds >= 0) {\n        setSeconds(seconds - 1);\n        setVisibleSeconds(seconds);\n      } else {\n        loadNextQuestion();\n      }\n    }, 1000);\n    return () => clearTimeout(timer);\n  }, [seconds]);\n\n  if (!questionSet) {\n    return <p> loading </p>;\n  }\n\n  return (\n    <Wrapper>\n      <p>{parse(questionSet.question)}</p>\n      <section>\n        <Answers\n          answers={questionSet.answers}\n          setPoints={setPoints}\n          points={points}\n        />\n      </section>\n      <footer>\n        <NextButtonStyle>\n          <BsArrowRightShort onClick={loadNextQuestion} />\n        </NextButtonStyle>\n      </footer>\n    </Wrapper>\n  );\n}\n\nconst Wrapper = styled.main`\n  padding: 0 30px;\n  display: grid;\n  grid-template-rows: auto 1fr auto;\n\n  p {\n    background-color: var(--beigeStandard);\n    color: var(--greenStandard);\n    height: min-content;\n    display: flex;\n    flex-flow: wrap;\n    justify-content: left;\n    width: 100%;\n    padding: 20px;\n    font-size: 1.1em;\n    margin-bottom: 30px;\n    border-radius: 10px;\n  }\n\n  footer {\n    display: flex;\n    justify-content: flex-end;\n  }\n`;\n","import Questions from \"../components/Questions\";\nimport styled from \"styled-components/macro\";\nimport React, { useState } from \"react\";\nimport logo from \"../images/greenMan.png\";\n\nexport default function TriviaGame({ numberOfQuestions, points, setPoints }) {\n  const [visibleSeconds, setVisibleSeconds] = useState(30);\n\n  return (\n    <>\n      <Header>\n        <div> </div>\n        <div> {visibleSeconds} sec </div>\n        <img src={logo} alt=\"Logo\" />\n      </Header>\n      <Questions\n        numberOfQuestions={numberOfQuestions}\n        setVisibleSeconds={setVisibleSeconds}\n        setPoints={setPoints}\n        points={points}\n      />\n    </>\n  );\n}\n\nconst Header = styled.header`\n  background: var(--beigeStandard);\n  color: var(--greenStandard);\n  display: grid;\n  grid-template-columns: 1fr 1fr 1fr;\n  padding: 10px 30px 10px 30px;\n\n  img {\n    justify-self: end;\n    height: 3em;\n  }\n\n  div {\n    justify-self: center;\n    align-self: center;\n    font-size: 1.2em;\n  }\n`;\n","import styled from \"styled-components/macro\";\n\nexport const NewGameButtonStyle = styled.button`\n  padding: 0px;\n  width: 100%;\n  border-radius: 10px;\n  height: 35px;\n  font-size: 1em;\n  background-color: var(--beigeStandard);\n  font-color: var(--standardGreen);\n  border: none;\n  outline: none;\n  box-shadow: none;\n  font-family: \"Playfair Display', serif\";\n`;\n","import styled from \"styled-components/macro\";\nimport React, { useEffect, useState } from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport { NewGameButtonStyle } from \"../components/NewGameButtonStyle\";\nimport { getTotalPointsByUser } from \"../services/apiService\";\n\nexport default function TriviaWelcome({ user }) {\n  const history = useHistory();\n  const [totalScore, setTotalScore] = useState(0);\n\n  useEffect(() => {\n    getTotalPointsByUser(user).then(setTotalScore);\n  }, []);\n\n  return (\n    <Wrapper>\n      <header> Welcome back,</header>\n      <p> {user}! </p>\n      <div> Current score: {totalScore} points</div>\n      <buttons>\n        <NewGameButtonStyle onClick={() => history.push(\"/questions\")}>\n          New Game\n        </NewGameButtonStyle>\n        <NewGameButtonStyle onClick={() => history.push(\"/scoreOverview\")}>\n          Score Overview\n        </NewGameButtonStyle>\n      </buttons>\n    </Wrapper>\n  );\n}\n\nconst Wrapper = styled.section`\n  height: 100vh;\n  background: var(--greenStandard);\n  color: var(--beigeStandard);\n  padding: 30px 30px 20px 30px;\n  display: grid;\n  grid-template-rows: 30% 20% 10% auto;\n  font-family: \"Playfair Display', serif\";\n\n  header {\n    display: flex;\n    font-size: 3em;\n    align-self: end;\n    padding-bottom: 10px;\n    text-align: center;\n  }\n\n  p {\n    font-size: 3em;\n    margin: 0px;\n    padding-bottom: 10px;\n    justify-self: center;\n  }\n\n  div {\n    font-size: 1.5em;\n    text-align: center;\n  }\n\n  buttons {\n    display: flex;\n    flex-direction: column;\n    grid-gap: 15px;\n    width: 100%;\n    padding-top: 20px;\n  }\n`;\n","import styled from \"styled-components/macro\";\nimport { savePoints } from \"../services/apiService\";\nimport { useHistory } from \"react-router-dom\";\nimport React from \"react\";\nimport { NewGameButtonStyle } from \"../components/NewGameButtonStyle\";\n\nexport default function TriviaResults({ user, points, selectionParameters }) {\n  const history = useHistory();\n  const triviaPointSavingDTO = {\n    user: user,\n    category: selectionParameters.category,\n    amount: selectionParameters.amount,\n    difficulty: selectionParameters.difficulty,\n    points: points,\n  };\n\n  function handleSubmit(triviaPointSavingDTO) {\n    savePoints(triviaPointSavingDTO).then((response) => {\n      history.push(\"/scoreOverview\");\n    });\n  }\n\n  return (\n    <Wrapper>\n      <h1> Congratulations! </h1>\n      <p> You scored: {points} points </p>\n      <section>\n        <NewGameButtonStyle onClick={() => history.push(\"/questions\")}>\n          New Game\n        </NewGameButtonStyle>\n        <NewGameButtonStyle onClick={() => handleSubmit(triviaPointSavingDTO)}>\n          {\" \"}\n          Save Score\n        </NewGameButtonStyle>\n      </section>\n    </Wrapper>\n  );\n}\n\nconst Wrapper = styled.section`\n  height: 100vh;\n  background: var(--greenStandard);\n  color: var(--beigeStandard);\n  display: grid;\n  grid-template-rows: 1fr 1fr 1fr;\n  padding: 30px;\n\n  h1 {\n    display: flex;\n    flex-direction: column;\n    justify-content: flex-end;\n    align-items: center;\n    font-size: 2.5em;\n    margin-bottom: 10px;\n  }\n\n  p {\n    font-size: 1.6em;\n    justify-self: center;\n    margin: 0;\n  }\n\n  section {\n    display: flex;\n    flex-direction: column;\n    grid-gap: 15px;\n    width: 100%;\n    padding-top: 20px;\n  }\n`;\n","import styled from \"styled-components/macro\";\n\nexport default function CategoryScoreCard({ category, triviaPointDetails }) {\n  return (\n    <CategoryList>\n      <header>{category} </header>\n      <ul>\n        <TableHeader>\n          <div> Level </div>\n          <div className=\"alignRight\"> # Points</div>\n          <div className=\"alignRight\"> # Questions</div>\n        </TableHeader>\n        {triviaPointDetails.map((level) => (\n          <li>\n            <Section>\n              <li> {level.difficulty} </li>\n              <li className=\"alignRight\"> {level.points} </li>\n              <li className=\"alignRight\"> {level.amount} </li>\n            </Section>\n          </li>\n        ))}\n      </ul>\n    </CategoryList>\n  );\n}\nconst TableHeader = styled.section`\n  display: grid;\n  grid-template-columns: 20% [end] 1fr 1fr;\n  text-decoration: underline;\n  border-width: thin;\n`;\n\nconst Section = styled.section`\n  display: grid;\n  grid-template-columns: 20% 1fr 1fr;\n`;\n\nconst CategoryList = styled.section`\n  header {\n    font-size: 1.3em;\n  }\n\n  ul {\n    padding: 0px;\n    margin: 10px 0 25px 0;\n    list-style: none;\n    display: grid;\n    grid-gap: 2px;\n  }\n\n  .alignRight {\n    text-align: end;\n  }\n`;\n","import styled from \"styled-components/macro\";\nimport CategoryScoreCard from \"./CategoryScoreCard\";\nimport { useEffect, useState } from \"react\";\nimport { getScoreByUser } from \"../services/apiService\";\n\nexport default function Scores({ user }) {\n  const [scoreList, setScoreList] = useState([]);\n\n  useEffect(() => {\n    getScoreByUser(user).then(setScoreList);\n  }, []);\n\n  return (\n    <Wrapper>\n      <h1> Score Overview </h1>\n      {scoreList.map((entry) => (\n        <li>\n          <CategoryScoreCard\n            key={entry.category}\n            category={entry.category}\n            triviaPointDetails={entry.triviaPointDetails}\n          />\n        </li>\n      ))}\n    </Wrapper>\n  );\n}\n\nconst Wrapper = styled.section`\n  h1 {\n    color: var(--beigeStandard);\n    font-size: 2.5em;\n    padding-bottom: 25px;\n    margin: 0px;\n  }\n\n  li {\n    grid-gap: 10px;\n    list-style: none;\n  }\n`;\n","import styled from \"styled-components/macro\";\nimport { BsArrowLeftShort } from \"react-icons/bs\";\nimport React from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport Scores from \"../components/Scores\";\n\nexport default function ScoreOverview({ user }) {\n  const history = useHistory();\n\n  return (\n    <Wrapper>\n      <Scores user={user} />\n      <footer>\n        <BsArrowLeftShort onClick={() => history.push(\"/welcome\")} />\n      </footer>\n    </Wrapper>\n  );\n}\n\nconst Wrapper = styled.section`\n  padding: 30px 30px 0px 30px;\n  layout: grid;\n  grid-template-rows: 1fr 10%;\n  color: var(--beigeStandard);\n  background: var(--greenStandard);\n  border: double;\n\n  footer {\n    display: flex;\n\n    align-content: end;\n\n    font-size: 40px;\n    cursor: pointer;\n    border: none;\n  }\n`;\n","export default __webpack_public_path__ + \"static/media/whiteMan.2ab37e44.png\";","import styled from \"styled-components/macro\";\nimport logo from \"../images/whiteMan.png\";\nimport React, { useState } from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport { animated, useSpring } from \"react-spring\";\nimport { NewGameButtonStyle } from \"../components/NewGameButtonStyle\";\nimport { checkUserExists } from \"../services/apiService\";\nimport { AiOutlineUserAdd } from \"react-icons/ai\";\n\nexport default function LoginPage({ setUser }) {\n  const history = useHistory();\n  const [userName, setUserName] = useState(\"\");\n  const hasUserName = userName.length > 0;\n\n  const props = useSpring({\n    delay: 1000,\n    opacity: 1,\n    from: { opacity: 0 },\n  });\n\n  const propsLogin = useSpring({\n    delay: 2000,\n    opacity: 1,\n    from: { opacity: 0 },\n  });\n\n  const handleSubmit = (event) => {\n    event.preventDefault();\n    if (!hasUserName) {\n      return;\n    }\n    setUserName(\"\");\n  };\n\n  const handleClick = () => {\n    checkUserExists(userName).then((response) => {\n      if (response) {\n        history.push(\"/welcome\");\n      } else {\n        alert(\"User does not exist. Please try again or add user\");\n      }\n    });\n  };\n\n  return (\n    <Wrapper onSubmit={handleSubmit}>\n      <animated.div style={props}>\n        <header>triviap</header>\n      </animated.div>\n      <div>\n        <img src={logo} alt=\"Logo\" />\n      </div>\n      <animated.div style={propsLogin}>\n        <buttons>\n          <input\n            type=\"text\"\n            value={userName}\n            placeholder=\"Enter User\"\n            font-size=\"16px\"\n            style={{\n              backgroundColor: \"#f7f7f2\",\n              fontSize: \"1em\",\n              font: \"Playfair Display', serif\",\n              outline: \"none\",\n              border: \"none\",\n              boxShadow: \"none\",\n            }}\n            onChange={(event) => {\n              const player = event.target.value;\n              setUserName(player);\n              setUser(player);\n            }}\n          />\n          <NewGameButtonStyle\n            backgroundColor=\"#f7f7f2\"\n            disabled={!hasUserName}\n            onClick={handleClick}\n          >\n            Login\n          </NewGameButtonStyle>\n        </buttons>\n      </animated.div>\n      <AddNewUserButton>\n        <animated.div style={propsLogin}>\n          <AiOutlineUserAdd onClick={() => history.push(\"/register\")} />\n        </animated.div>\n      </AddNewUserButton>\n    </Wrapper>\n  );\n}\n\nconst AddNewUserButton = styled.button`\n  border: none;\n  background: var(--greenStandard);\n  color: var(--beigeStandard);\n  font-size: 30px;\n  justify-self: end;\n  align-self: end;\n  padding: 0px;\n`;\n\nconst Wrapper = styled.form`\n  height: 100vh;\n  background: var(--greenStandard);\n  color: var(--beigeStandard);\n  display: grid;\n  grid-template-rows: 30% 30% auto 10%;\n  padding: 30px 30px 20px 30px;\n  font-family: \"Playfair Display', serif\";\n\n  header {\n    font-size: 4em;\n    align-self: flex-end;\n    justify-self: center;\n    padding-bottom: 10px;\n  }\n\n  div {\n    display: flex;\n    justify-content: center;\n    align-self: center;\n    height: 100%;\n  }\n\n  buttons {\n    display: flex;\n    flex-direction: column;\n    grid-gap: 15px;\n    width: 100%;\n    padding-top: 20px;\n\n    input {\n      padding: 0px;\n      width: 100%;\n      border-radius: 10px;\n      height: 35px;\n      font-size: 1em;\n      text-align: center;\n      background-color: var(--beigeStandard);\n      align-self: end;\n      outline: none;\n      box-shadow: none;\n      font-family: \"Playfair Display', serif\";\n    }\n  }\n`;\n","import { NewGameButtonStyle } from \"../components/NewGameButtonStyle\";\nimport React, { useState } from \"react\";\nimport styled from \"styled-components/macro\";\nimport { useHistory } from \"react-router-dom\";\nimport { addUser, checkUserExists } from \"../services/apiService\";\n\nexport default function TriviaRegister({ setUser }) {\n  const history = useHistory();\n  const [userName, setUserName] = useState(\"\");\n  const hasUserName = userName.length > 0;\n\n  const handleSubmit = (event) => {\n    event.preventDefault();\n    if (!hasUserName) {\n      return;\n    }\n    setUserName(\"\");\n  };\n\n  const userDTO = {\n    user: userName,\n    triviaPointCategory: [],\n  };\n\n  const handleClick = () => {\n    checkUserExists(userName).then((response) => {\n      if (response) {\n        alert(\"User already exists. Please try again\");\n      } else {\n        history.push(\"/questions\");\n        addUser(userDTO).then((pointSummary) => {\n          const newUser = pointSummary.user;\n          setUser(newUser);\n        });\n      }\n    });\n  };\n\n  return (\n    <Wrapper onSubmit={handleSubmit}>\n      <header>Welcome!</header>\n      <p>Please register below</p>\n      <buttons>\n        <input\n          type=\"text\"\n          value={userName}\n          placeholder=\"Enter New User\"\n          font-size=\"16px\"\n          style={{\n            backgroundColor: \"#f7f7f2\",\n            fontSize: \"1em\",\n            font: \"Playfair Display', serif\",\n            outline: \"none\",\n            border: \"none\",\n            boxShadow: \"none\",\n          }}\n          onChange={(event) => {\n            const player = event.target.value;\n            setUserName(player);\n          }}\n        />\n        <NewGameButtonStyle\n          backgroundColor=\"#f7f7f2\"\n          disabled={!hasUserName}\n          onClick={handleClick}\n        >\n          Register\n        </NewGameButtonStyle>\n      </buttons>\n    </Wrapper>\n  );\n}\n\nconst Wrapper = styled.form`\n  height: 100vh;\n  background: var(--greenStandard);\n  color: var(--beigeStandard);\n  display: grid;\n  grid-template-rows: 30% 30% auto 10%;\n  padding: 30px 30px 20px 30px;\n  font-family: \"Playfair Display', serif\";\n\n  header {\n    font-size: 4em;\n    align-self: flex-end;\n    justify-self: center;\n    padding-bottom: 10px;\n  }\n\n  p {\n    font-size: 1.5em;\n    margin: 0px;\n    padding-bottom: 10px;\n    justify-self: center;\n  }\n\n  buttons {\n    display: flex;\n    flex-direction: column;\n    grid-gap: 15px;\n    width: 100%;\n    padding-top: 20px;\n\n    input {\n      padding: 0px;\n      width: 100%;\n      border-radius: 10px;\n      height: 35px;\n      font-size: 1em;\n      text-align: center;\n      background-color: var(--beigeStandard);\n      align-self: end;\n      outline: none;\n      box-shadow: none;\n      font-family: \"Playfair Display', serif\";\n    }\n  }\n`;\n","import { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\nimport TriviaSelector from \"./pages/TriviaSelector\";\nimport Layout from \"./components/Layout\";\nimport TriviaGame from \"./pages/TriviaGame\";\nimport TriviaWelcome from \"./pages/TriviaWelcome\";\nimport { useState } from \"react\";\nimport TriviaResults from \"./pages/TriviaResults\";\nimport ScoreOverview from \"./pages/ScoreOverview\";\nimport LoginPage from \"./pages/LoginPage\";\nimport TriviaRegister from \"./pages/TriviaRegister\";\n\nexport default function App() {\n  const [numberOfQuestions, setNumberOfQuestions] = useState(0);\n  const [points, setPoints] = useState(0);\n  const [selectionParameters, setSelectionParameters] = useState({});\n  const [user, setUser] = useState(\"\");\n  console.log(selectionParameters);\n\n  return (\n    <div>\n      <Router>\n        <Switch>\n          <Route exact path=\"/login\">\n            <LoginPage setUser={setUser} />\n          </Route>\n          <Route exact path=\"/welcome\">\n            <TriviaWelcome user={user} />\n          </Route>\n          <Route exact path=\"/register\">\n            <TriviaRegister setUser={setUser} />\n          </Route>\n          <Route exact path=\"/questions\">\n            <Layout>\n              <TriviaSelector\n                onClickSetNumberOfQuestions={setNumberOfQuestions}\n                setSelectionParameters={setSelectionParameters}\n                setPoints={setPoints}\n              />\n            </Layout>\n          </Route>\n          <Route exact path=\"/questions/:questionID\">\n            <Layout>\n              <TriviaGame\n                numberOfQuestions={numberOfQuestions}\n                setPoints={setPoints}\n                points={points}\n              />\n            </Layout>\n          </Route>\n          <Route exact path=\"/results\">\n            <TriviaResults\n              user={user}\n              points={points}\n              selectionParameters={selectionParameters}\n            />\n          </Route>\n          <Route exact path=\"/scoreOverview\">\n            <ScoreOverview user={user} />\n          </Route>\n        </Switch>\n      </Router>\n    </div>\n  );\n}\n","import { createGlobalStyle } from \"styled-components\";\n\nexport default createGlobalStyle`\n  :root {\n    --greenStandard: #015252;\n    --beigeStandard: #f7f7f2;\n    font-family: \"Playfair Display', serif\";\n  }\n\n  * {\n    box-sizing: border-box;\n  }\n\n  body {\n    margin: 0;\n    background-color: #015252;\n  }\n\n`;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport GlobalStyle from \"./components/GlobalStyle\";\n\n\nReactDOM.render(\n    <React.StrictMode>\n        <GlobalStyle/>\n        <App/>\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n"],"sourceRoot":""}